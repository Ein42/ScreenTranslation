#!/usr/bin/python3

from mysql import connector
from mysql.connector import errorcode
from termcolor import cprint
import sysv_ipc as ipc
import getpass
import readline
import warnings
import string
import signal
import os
import sys
import re


def doNothing():
    pass

def deletePunctuations(src):

    for i in range(len(src)-1, -1, -1):

        if src[i] in string.punctuation or src[i].isspace():
            src = src[:-1]
        else:
            return src

def phoneticNum(attr):
    #cprint(attr, 'red' , attrs=['bold'])
    if 'phon_en' in attr and 'phon_am' in attr:
        return 2
    if 'phon_en' in attr or 'phon_am' in attr:
        return 1
    else:
        return 0

def isPartOfSpeech(key):

    attributes = [  'n.，adj.', 'adv./n.', 'adv./conj.', 'pron./det.', 'vi.&vt.', 'prep./adv.', 'v./ adj.', 'n.&adv.', \
            'pref./abbr.', 'phr.', 'adv.&adj.', 'inf.', 'v.& n.', 'adj./det.', 'abbr.& n.', 'aux./ v.', 'num./det.', \
            'adj.& pron.', 'vt.&vi.', 'conj./adv.', 'v./n.', 'n.& adv.', 'ns.', 'suf.', 'n.&vt.', 'n./int.', 'det./ord.',\
            'det./adj.', 'adv./pron.', 'conj./prep.', 'vt.& vi.', 'n./det.', 'adj./adv.', 'adj.& adv.', 'symb.', 'n.& int.',\
            'vi.& n.', 'pref.', 'prep./conj.', 'v．', 'adj./n.', 'modal', 'comb.', 'color', 'short', 'ord.', 'num.',\
            'adj./int.', 'v./aux.', 'adj.& n.', 'det./pron.', 'n./adv.', 'det.', 'n./v.', 'conv.', 'prep.& adv.', \
            'adv./prep./conj.', 'vi.', 'vt.', 'prep.', 'adv./prep.', 'n./adj.', 'abbr.', 'art.', 'aux.', 'conj.', \
            'int./n.', 'int.', 'adv.', 'adj.', 'pron.', 'adj./pron.', 'v.', 'n.', 'other']

    return key in attributes


#Fetch raw data from mysql
def fetchWord(word, attributes):

    cnx = connector.connect(
            user=getpass.getuser(),
            password='',
            host='127.0.0.1',
            database='dict',
            )

    cursor = cnx.cursor()

    query = ( "select * from data where word like %s" )

    try:
        cursor.execute ( query, (word,) )
    except Exception as e:
        cprint('Mysql:'+str(e), 'red')
        return None

    result = cursor.fetchall()
    value = ()
    try:
        #result = ([]); result[0] = []
        for r in result[0]:
            value += (r, )
    except IndexError as e:
        cprint(str(e)+"(In fetchDict <fetchWord func>)", 'red')
        return None

    cursor.execute("desc data")

    result = cursor.fetchall()
    column = ()
    for r in result:
        column += (r[0], )

    data = {}
    for i in range(len(column)):
        if value[i] is not None and column[i] != 'id':
            data[str(column[i])] = str(value[i])
            attributes.append ( str(column[i]) )
            pass

    cnx.close()
    #cprint(attributes, 'green');
    return data;

#Convert raw data to data that can be recognized by ScreenTranslation
def formatData(word, attributes):

    output = ""
    data = fetchWord(word, attributes);
    if data is None:
        return None
    #print()
    #cprint("offline source:"+str(data), 'yellow')
    #print()

    global pos

    if data is None:
        return data

    # source | phonetic | zhtran | entran | wordform | audio
    keys = [ 'word', 'phon_en', 'phon_am', 'zhtran', 'entran', 'wordform' ]

    global flags
    i = -1
    for key in keys:

        i = i + 1

        if key != 'zhtran':
            try:
                if key == 'phon_en':
                    output += '   ' + data[key];
                elif key == 'phon_am':
                    output += '   ' + data[key] + '|';
                else:
                    output += data[key].replace('\n','') + '|' ;

            except Exception as e:
                if key != 'phon_en':
                    output += '|';
        else:
            try:
                i = i - 2 + phoneticNum(attributes)
                while isPartOfSpeech(attributes[i]):
                    if attributes[i] == 'other':
                        output += attributes[i] + '.' + data[attributes[i]].replace('\n','') + '|';
                    else:
                        output += attributes[i] + data[attributes[i]].replace('\n','') + '|';
                    
                    pos = pos + 1
                    i= i + 1
            except IndexError as e:
                pass


    path1 = os.path.expanduser('~')+'/'+'WordMp3/'+str(data['word'])[0]+'/'+str(data['word'])+'_en.mp3'
    path2 = os.path.expanduser('~')+'/'+'WordMp3/'+str(data['word'])[0]+'/'+str(data['word'])+'_uk.mp3'

    if os.path.exists(path1):
        output += path1

    output += '|'

    if os.path.exists(path2):
        output += path2

    output += '|'

    return output

def connectShm():

    warnings.simplefilter("ignore")
    path = "/tmp"
    projectID = 2338
    key = ipc.ftok(path, projectID)
    shm = ipc.SharedMemory(key, 0, 0)
    shm.attach(0,0)

    return shm 

def writeFlags(shm, attributes):

    #cprint('attributes:'+str(attributes), 'blue')

    flagStr = ""

    if 'phon_en' in attributes or 'phon_am' in attributes:
        flagStr = '1'
    else:
        flagStr = '0'

    flagStr += str(pos)

    if 'entran' in attributes:
        flagStr += '1'
    else:
        flagStr += '0'
    
    if 'wordform' in attributes:
        flagStr += '1'
    else:
        flagStr += '0'

    flagStr += '2'
    flagStr += '0000'

    #cprint('Offline flags:'+flagStr, 'blue')
    shm.write ( flagStr, 1 )

def exit(signo, frame):
    sys.exit(0)

def main():

    global useShm
    #Connect to the shared memory
    shm = connectShm() if useShm else doNothing
    offset = 0
    actualStart = 10

    signal.signal ( signal.SIGTERM, exit )

    while True:
        try:
            rawInput = str(input("> "))
        except KeyboardInterrupt as e:
            cprint('Good bye\n', 'blue')
            sys.exit()

        cprint('Offline raw: ' +rawInput + '<' , 'yellow', attrs=['bold'], end='\n\n')

        result = re.findall(r'\w+', rawInput);
        if len(result) > 1:
            #cprint('Not a word: '+str(result), 'red')
            continue
        
        bak = rawInput
        rawInput = deletePunctuations(rawInput)
        if rawInput is None:
            shm.write('101000'+'0000'+bak+'||'+bak+'|||||') if useShm else doNothing
            continue 

        #Remove the space characters
        global pos
        pos = 0
        word = rawInput.replace(' ', '');
        attributes = []

        if not str.isspace(word) and word != '':
            data = formatData(word, attributes)
            if data is not None:
                cprint('OFFLINE:  '+data, 'green', attrs=['bold'])
                shm.write(data, actualStart) if useShm else doNothing
                writeFlags(shm, attributes) if useShm else doNothing
                shm.write('1', 0) if useShm else doNothing
            else:
                cprint("NULL", 'blue')


#共享内存使用标识
useShm = 0
sys.argv.remove(sys.argv[0])
if len(sys.argv) >= 1:
    for arg in sys.argv:
        if arg == '-s':
            cprint('Using SharedMemory (offline translate)', 'cyan')
            useShm = 1


#Global Value
pos = 0
flags=""
main()
